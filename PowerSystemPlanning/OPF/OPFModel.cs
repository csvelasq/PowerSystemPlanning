using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Gurobi;

namespace PowerSystemPlanning.OPF
{
    public class OPFModel
    {
        PowerSystem powerSystem;
        GRBModel model;
        GRBEnv env;
        /// <summary>
        /// Power generated by each generator (in MW).
        /// </summary>
        GRBVar[] PGen;
        /// <summary>
        /// Power flow through each transmission line in the power system (in MW).
        /// </summary>
        GRBVar[] PFlow;
        /// <summary>
        /// Nodal power balance (for each node).
        /// </summary>
        GRBConstr[] NodalPowerBalance;
        /// <summary>
        /// DC power flow equations (for each transmission line).
        /// </summary>
        GRBConstr[] DCPowerFlow;

        /// <summary>
        /// Gets the power generated by each generator in the current solution of the economic dispatch.
        /// </summary>
        public double[] PGen_Solution
        {
            get
            {
                return this.model.Get(GRB.DoubleAttr.X, this.PGen);
            }
        }

        /// <summary>
        /// Gets the total generation cost in the current solution of the economic dispatch.
        /// </summary>
        public double TotalGenerationCost
        {
            get
            {
                return this.model.Get(GRB.DoubleAttr.ObjVal);
            }
        }

        public OPFModel(PowerSystem powerSystem)
        {
            this.powerSystem = powerSystem;
            this.env = new GRBEnv();
            this.model = new GRBModel(env);
            // Add variables to Gurobi model: power generated by each generator
            PGen = new GRBVar[powerSystem.NumberOfGeneratingUnits];
            double[] coeffsPGenInPowerBalance = new double[powerSystem.NumberOfGeneratingUnits];
            for (int i = 0; i < powerSystem.NumberOfGeneratingUnits; i++)
            {
                GeneratingUnit gen = powerSystem.generatingUnits[i];
                PGen[i] = model.AddVar(0, gen.InstalledCapacityMW, gen.MarginalCost, GRB.CONTINUOUS, "PGen" + gen.Id);
                coeffsPGenInPowerBalance[i] = 1;
            }
            // Add variables to Gurobi model: power flow through each transmission line
            PFlow = new GRBVar[powerSystem.NumberOfTransmissionLines];
            double[] coeffsPFlowInPowerBalance = new double[powerSystem.NumberOfTransmissionLines];
            for (int i = 0; i < powerSystem.NumberOfTransmissionLines; i++)
            {
                TransmissionLine tl = powerSystem.transmissionLines[i];
                PFlow[i] = model.AddVar(0, tl.ThermalCapacityMW, 0, GRB.CONTINUOUS, "PFlow" + tl.Id);
                coeffsPGenInPowerBalance[i] = 1;
            }
            this.model.Update();
            // Sets objective: minimize total generation costs
            this.model.Set(GRB.IntAttr.ModelSense, GRB.MINIMIZE);
            // Creates power balance constraint in each node
            this.NodalPowerBalance = new GRBConstr[powerSystem.NumberOfNodes];
            for (int i = 0; i < powerSystem.NumberOfNodes; i++)
            {
                GRBLinExpr powerBalanceLHS = new GRBLinExpr();
                powerBalanceLHS.AddTerms(coeffsPGenInPowerBalance, PGen);
                GRBLinExpr powerBalanceRHS = new GRBLinExpr();
                powerBalanceRHS.AddConstant(powerSystem.TotalMWInelasticLoads);
                NodalPowerBalance[i] = model.AddConstr(powerBalanceLHS, GRB.EQUAL, powerBalanceRHS, "PowerBalance");
            }
        }

        public void Solve()
        {
            this.model.Optimize();
        }

        public void Dispose()
        {
            // Dispose of Gurobi model and env
            model.Dispose();
            env.Dispose();
        }
    }
}
