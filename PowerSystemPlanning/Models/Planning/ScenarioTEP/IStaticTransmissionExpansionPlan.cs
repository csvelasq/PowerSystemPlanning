using PowerSystemPlanning.Models.Planning.ExpansionState.Tep;
using PowerSystemPlanning.Models.Planning.InvestmentBranch;
using PowerSystemPlanning.Models.SystemBaseData;
using System.Collections.Generic;

namespace PowerSystemPlanning.Models.Planning.ScenarioTEP
{
    /// <summary>
    /// A static transmission expansion plan.
    /// </summary>
    /// <remarks>
    /// A static expansion plan is a set of transmission lines to be built, 
    /// among all possible candidate transmission lines.
    /// Selected lines are all built simultaneously, 
    /// and are available in the future simultaneously as well.
    /// </remarks>
    public interface IStaticTransmissionExpansionPlan
    {
        /// <summary>
        /// The Static TEP model to which this expansion plan belongs.
        /// </summary>
        IStaticScenarioTepSimulationModel MyTepModel { get; }
        /// <summary>
        /// The state of each candidate transmission line in a power system.
        /// </summary>
        IList<ICandidateTransmissionLineState> CandidateTransmissionLineStates { get; }
        /// <summary>
        /// Unique ID of this transmission expansion plan.
        /// </summary>
        /// <remarks>
        /// Generated by the binary representation of built transmission lines.
        /// </remarks>
        ulong PlanId { get; }
        /// <summary>
        /// List of those candidate lines from <see cref="CandidateTransmissionLineStates"/> that are built.
        /// </summary>
        IList<ICandidateTransmissionLine> BuiltTransmissionLines { get; }
        /// <summary>
        /// Total investment cost in new transmission lines.
        /// </summary>
        double TotalInvestmentCost { get; }
        /// <summary>
        /// Operations costs under each scenario.
        /// </summary>
        List<double> ScenariosOperationCosts { get; }
        /// <summary>
        /// Total costs (investment plus operation) under each scenario.
        /// </summary>
        /// <remarks>
        /// Investment and total costs are each multiplied by a factor (<see cref="IStaticScenarioTepSimulationModel.InvestmentCostsMultiplierInObjectiveFunction"/> and <see cref="IStaticScenarioTepSimulationModel.OperationCostsMultiplierInObjectiveFunction"/>, respectively)
        /// in order to obtain a single total cost measure.
        /// Such factors can be set freely by the user and may represent the calculation of NPV of operation costs,
        /// or annualization of investment costs.
        /// </remarks>
        List<double> ScenariosTotalCosts { get; }
        /// <summary>
        /// Expected total costs (investment plus expected operation costs).
        /// </summary>
        double ExpectedTotalCosts { get; }
        /// <summary>
        /// Evaluates total costs (investment plus operation) under each scenario.
        /// </summary>
        /// <returns>A list of the total costs (investment plus operation) under each scenario.</returns>
        /// <remarks>
        /// Calls the method <see cref="IStaticScenarioTepSimulationModel.EvaluateScenarioOperationCosts(IList{ICandidateTransmissionLineState})"/> of <see cref="MyTepModel"/>, with argument <see cref="CandidateTransmissionLineStates"/>. 
        /// Then sets the fields <see cref="ScenariosOperationCosts"/>, <see cref="ScenariosTotalCosts"/>, and <see cref="ExpectedTotalCosts"/>.
        /// </remarks>
        List<double> EvaluateScenariosTotalCosts();
    }
}
